/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab412;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;

/**
 *
 * @author njy1718
 */
public class LinkedBinaryTreeNode<E> implements MutableTreeNode {

    /**
     * @param args the command line arguments
     */
    private E element;
    private MutableTreeNode parent;
    private List<MutableTreeNode> children;
    private MutableTreeNode LeftChild;
    private MutableTreeNode RightChild;
    
    
    public LinkedBinaryTreeNode() {
    }

    public LinkedBinaryTreeNode(E element) 
    {
        this.element = element;
         parent = null;
        //children = new ArrayList<MutableTreeNode>();
    }
    
   
    
    
    
    public static void main(String[] args) 
    {
        // TODO code application logic here
      
      MutableTreeNode root = new LinkedBinaryTreeNode<String>("A");
      MutableTreeNode nodeB = new LinkedBinaryTreeNode<String>("B");
      MutableTreeNode nodeC = new LinkedBinaryTreeNode<String>("C");
      MutableTreeNode nodeD = new LinkedBinaryTreeNode<String>("D");
      MutableTreeNode nodeE = new LinkedBinaryTreeNode<String>("E");
      MutableTreeNode nodeF = new LinkedBinaryTreeNode<String>("F");
      
    
      
      
      
      
      /*  nodeB.insert(nodeD, 0);
      nodeB.insert(nodeE, 1);
      nodeC.insert(nodeF, 0);
      root.insert(nodeB, 0);*/
      
      
     /* root.insert(nodeC, 1);*/
      System.out.println("Original Tree: " + root);
      /*root.remove(nodeC);
      nodeB.insert(nodeC, 1);
      System.out.println("Modified Tree: " + root);*/
    }

    @Override
    public void insert(MutableTreeNode child, int idx) throws IllegalArgumentException
    {
        if(child==null)
        {
            throw new IllegalArgumentException("null child");
        }
        else
        {
            child.removeFromParent();
            //children.add(idx,child);
            child.setParent(this);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void remove(int arg0)  throws  IllegalArgumentException
    {
        MutableTreeNode Child = children.get(arg0);
        if(Child == null)
        {
            throw new IllegalArgumentException("null child");
        }
        else
        {
            
            remove(Child);
        
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void remove(MutableTreeNode NODE) 
    {
        if(children.remove(NODE))
        {
            NODE.setParent(null);
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setUserObject(Object arg0) 
    {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeFromParent() 
    {
        if (this.parent!=null)
        {
            parent.remove(this);
            this.parent = null;
         
        }
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void setParent(MutableTreeNode newParent) 
    {
        removeFromParent(); // remove this node from its existing parent
        this.parent = newParent;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public TreeNode getChildAt(int arg0) throws IndexOutOfBoundsException
    {
       return children.get(arg0);
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getChildCount() 
    {
        return children.size();
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public TreeNode getParent() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int getIndex(TreeNode arg0) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean getAllowsChildren() 
    {
        return true;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean isLeaf() 
    {
        return getChildCount() == 0;
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Enumeration<? extends TreeNode> children() 
    {
        //return(Enumeration<E>(new Enumerator(children.iterator())));
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public String toString()
    {
        String output = "" + this.element;
    
        return output;
    }
    
    class Enumerator<E>  implements Enumeration<E>
    {
        LinkedList LIST = new LinkedList();
        @Override
        public boolean hasMoreElements() 
        {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public E nextElement() 
        {
            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public Iterator<E> asIterator() 
        {
            return Enumeration.super.asIterator(); //To change body of generated methods, choose Tools | Templates.
        }
    
    
    }
}
